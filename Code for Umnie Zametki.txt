#начни тут создавать приложение с умными заметками
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import(
    QApplication,
    QWidget,
    QPushButton,
    QLabel,
    QListWidget,
    QLineEdit,
    QTextEdit,
    QHBoxLayout,
    QVBoxLayout,
    QInputDialog)
import json
import pandas as pd
app = QApplication([])

notes = {
    'Добро пожаловать' : {
        'текст' : 'Это самое лучшее приложение в мире!',
        'теги' : ['Добро', 'инструкция']
    }
}
with open('notes_data.json', 'w') as file:
    json.dump(notes, file)

notes_win = QWidget()
notes_win.setWindowTitle('Умные заметки')
notes_win.resize(900, 600)

list_notes = QListWidget()
list_not_label = QLabel('Список Заметок')

создать_заметку = QPushButton('Создать заметку')
удалить_заметку = QPushButton('Удалить заметку')
засейвить_заметку = QPushButton('Сохранить заметку')

tag = QLineEdit('')
tag.setPlaceholderText('Введи тег...')
taug = QTextEdit()
button_tag_add = QPushButton('Добавить к заметке')
button_tag_del = QPushButton('Открепить от заметки')
button_tag_search = QPushButton('Искть заметку по тегу')
list_tags = QListWidget()
list_tags_label = QLabel('Список тегов')

layout_notes = QHBoxLayout()
col_1 = QVBoxLayout()
col_1.addWidget(taug)

col_2 = QVBoxLayout()
col_2.addWidget(list_not_label)
col_2.addWidget(list_notes)
row_1 = QHBoxLayout()
row_1.addWidget(создать_заметку)
row_1.addWidget(удалить_заметку)
row_2 = QHBoxLayout()
row_2.addWidget(засейвить_заметку)
col_2.addLayout(row_1)
col_2.addLayout(row_2)

col_2.addWidget(list_tags_label)
col_2.addWidget(list_tags)
col_2.addWidget(tag)
row_3 = QHBoxLayout()
row_3.addWidget(button_tag_add)
row_3.addWidget(button_tag_del)
row_4 = QHBoxLayout()
row_4.addWidget(button_tag_search)

col_2.addLayout(row_3)
col_2.addLayout(row_4)

layout_notes.addLayout(col_1, stretch = 2)
layout_notes.addLayout(col_2, stretch = 1)
notes_win.setLayout(layout_notes)

def add_note():
    note_name, ok = QInputDialog.getText(notes_win, 'Добавить заметку', 'Название заметки: ')
    if ok and note_name != '':
        notes[note_name] = {'текст' : '', 'теги' : []}
        list_notes.addItem(note_name)
        list_tags.addItems(notes[note_name]['теги'])
        print(notes)

def del_note():
    if list_notes.selectedItems():
        key = list_notes.selectedItems()[0].text()
        del notes[key]
        list_notes.clear()
        list_tags.clear()
        taug.clear()
        list_notes.addItems(notes)
        with open('notes_data.json', 'w') as file:
            json.dump(notes, file, sort_keys=True, ensure_ascii=False)
        print(notes)
    else:
        print('Заметка для удаления не выбрана')
def save_note():
    if list_notes.selectedItems():
        key = list_notes.selectedItems()[0].text()
        notes[key]['текст'] = taug.toPlainText()
        with open('notes_data.json', 'w') as file:
            json.dump(notes, file, sort_keys=True,ensure_ascii=False)
        print(notes)
    else:
        print('Заметка для сохранения не выбрана!')
def add_tag():
    if list_notes.selectedItems():
        key = list_notes.selectedItems()[0].text()
        tagio = tag.text()
        if not tagio in notes[key]['теги']:
            notes[key]['теги'].append(tagio)
            tag.clear()
        with open('notes_data.json', 'w') as file:
            json.dump(notes, file, sort_keys=True, ensure_ascii=False)
        print(notes)
    else:
        print('Заметка для добавления тега не выбрана!')
def del_tag():
    if list_tags.selectedItems():
        key = list_notes.selectedItems()[0].text()
        tagio = list_tags.selectedItems()[0].text()
        notes[key]['теги'].remove(tagio)
        list_tags.clear()
        list_tags.addItems(notes[key]['теги'])
        with open('notes_data.json', 'w') as file:
            json.dump(notes, file, sort_keys=True, ensure_ascii=False)
    else:
        print('Тег для удаления не выбран!')
def search_tag():
    print(button_tag_search.text())
    tagio = tag.text()
    if button_tag_search.text() == 'Искать заметку по тегу' and tagio:
        print(tagio)
        notes_filtred = {}
        for note in notes:
            if tagio in notes[note]['теги']:
                notes_filtred[note]=notes[note]
        button_tag_search.setText('Сбросить поиск')
        list_notes.clear()
        list_tags.clear()
        list_notes.addItems(notes_filtred)
        print(button_tag_search.text())
    elif button_tag_search.text() == 'Сбросить поиск':
        tag.clear()
        list_notes.clear()
        list_tags.clear()
        list_notes.addItems(notes)
        button_tag_search.setText('Искать заметку по тегу')
        print(button_tag_search.text())
    else:
        pass
def show_note():
    key = list_notes.selectedItems()[0].text()
    print(key)
    taug.setText(notes[key]['текст'])
    list_tags.clear()
    list_tags.addItems(notes[key]['теги'])
list_notes.itemClicked.connect(show_note)
button_tag_add.clicked.connect(add_tag)
button_tag_del.clicked.connect(del_tag)
button_tag_search.clicked.connect(search_tag)
создать_заметку.clicked.connect(add_note)
удалить_заметку.clicked.connect(del_note)
засейвить_заметку.clicked.connect(save_note)
notes_win.show()

with open('notes_data.json', 'r') as file:
    notes = json.load(file)
list_notes.addItems(notes)

app.exec_()